// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OfficeMenStore.Domain.EF;

#nullable disable

namespace OfficeMenStore.Domain.Migrations
{
    [DbContext(typeof(OfficeMenStoreDbContext))]
    [Migration("20240417073444_update-cartItem-tables")]
    partial class updatecartItemtables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "id",
                            ClaimValue = "372ea575-2536-4076-9bab-3e3138de495f",
                            UserId = new Guid("372ea575-2536-4076-9bab-3e3138de495f")
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "email",
                            ClaimValue = "admin@gmail.com",
                            UserId = new Guid("372ea575-2536-4076-9bab-3e3138de495f")
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "roles",
                            ClaimValue = "Admin",
                            UserId = new Guid("372ea575-2536-4076-9bab-3e3138de495f")
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "id",
                            ClaimValue = "8a820adb-93d7-4c6f-9404-bdbfc14419f4",
                            UserId = new Guid("8a820adb-93d7-4c6f-9404-bdbfc14419f4")
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "email",
                            ClaimValue = "kha@gmail.com",
                            UserId = new Guid("8a820adb-93d7-4c6f-9404-bdbfc14419f4")
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "roles",
                            ClaimValue = "User",
                            UserId = new Guid("8a820adb-93d7-4c6f-9404-bdbfc14419f4")
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "id",
                            ClaimValue = "2a738bf3-a14b-488e-b04e-17f918e8d6a4",
                            UserId = new Guid("2a738bf3-a14b-488e-b04e-17f918e8d6a4")
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "email",
                            ClaimValue = "lam@gmail.com",
                            UserId = new Guid("2a738bf3-a14b-488e-b04e-17f918e8d6a4")
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "roles",
                            ClaimValue = "User",
                            UserId = new Guid("2a738bf3-a14b-488e-b04e-17f918e8d6a4")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("372ea575-2536-4076-9bab-3e3138de495f"),
                            RoleId = new Guid("9e87b492-5343-4272-9a34-fa5de7cffb22")
                        },
                        new
                        {
                            UserId = new Guid("8a820adb-93d7-4c6f-9404-bdbfc14419f4"),
                            RoleId = new Guid("8f7579ee-4af9-4b71-9ada-7f792f76dc31")
                        },
                        new
                        {
                            UserId = new Guid("2a738bf3-a14b-488e-b04e-17f918e8d6a4"),
                            RoleId = new Guid("8f7579ee-4af9-4b71-9ada-7f792f76dc31")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("OfficeMenStore.Domain.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressDetail = "Ký túc xá A, Trường Đại học Cần Thơ, đường 3/2, phường Xuân Khánh, quận Ninh Kiều, TP.Cần Thơ",
                            IsDeleted = false,
                            UserId = new Guid("8a820adb-93d7-4c6f-9404-bdbfc14419f4")
                        },
                        new
                        {
                            Id = 2,
                            AddressDetail = "87 Lê Văn Huân, phường 13, quận Tân Bình, TP. Hồ Chí Minh",
                            IsDeleted = false,
                            UserId = new Guid("8a820adb-93d7-4c6f-9404-bdbfc14419f4")
                        });
                });

            modelBuilder.Entity("OfficeMenStore.Domain.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = new Guid("8a820adb-93d7-4c6f-9404-bdbfc14419f4")
                        });
                });

            modelBuilder.Entity("OfficeMenStore.Domain.Models.CartItem", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SizeProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AddedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartId", "ProductId", "SizeProductId", "AddedTime");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("OfficeMenStore.Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 4, 17, 14, 34, 43, 920, DateTimeKind.Local).AddTicks(2135));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 4, 17, 14, 34, 43, 920, DateTimeKind.Local).AddTicks(2385));

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Image = "1.png",
                            IsDeleted = false,
                            Name = "Áo sơ mi"
                        },
                        new
                        {
                            Id = 2,
                            Image = "2.png",
                            IsDeleted = false,
                            Name = "Áo sơ mi"
                        },
                        new
                        {
                            Id = 3,
                            Image = "3.png",
                            IsDeleted = false,
                            Name = "Phụ kiện"
                        });
                });

            modelBuilder.Entity("OfficeMenStore.Domain.Models.FeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 4, 17, 14, 34, 43, 920, DateTimeKind.Local).AddTicks(3971));

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Rate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("FeedBacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Test",
                            CreatedDate = new DateTime(2024, 4, 17, 14, 34, 43, 926, DateTimeKind.Local).AddTicks(3869),
                            ProductId = 1,
                            Rate = 5,
                            UserId = new Guid("8a820adb-93d7-4c6f-9404-bdbfc14419f4")
                        });
                });

            modelBuilder.Entity("OfficeMenStore.Domain.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressDelivery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ApproveTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CancelTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("PayStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RejectedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OfficeMenStore.Domain.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SizeProductId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal>("OrderPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId", "ProductId", "SizeProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SizeProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("OfficeMenStore.Domain.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 4, 17, 14, 34, 43, 920, DateTimeKind.Local).AddTicks(1154));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 4, 17, 14, 34, 43, 920, DateTimeKind.Local).AddTicks(1470));

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "1.png",
                            Name = "Áo sơ mi vải Jersey ngắn tay",
                            Price = 489000m,
                            Rating = 4.0,
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "2.png",
                            Name = "Áo sơ mi vải Jersey ngắn tay",
                            Price = 489000m,
                            Rating = 3.0,
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "3.png",
                            Name = "Áo sơ mi vải Jersey ngắn tay",
                            Price = 489000m,
                            Rating = 5.0,
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "4.png",
                            Name = "Áo sơ mi vải Jersey ngắn tay",
                            Price = 489000m,
                            Rating = 3.5,
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CreatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "5.png",
                            Name = "Áo sơ mi vải Jersey ngắn tay",
                            Price = 489000m,
                            Rating = 3.5,
                            UpdatedTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("OfficeMenStore.Domain.Models.SizeDetail", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SizeProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "SizeProductId");

                    b.HasIndex("SizeProductId");

                    b.ToTable("SizeDetails");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            SizeProductId = 1,
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = 1,
                            SizeProductId = 2,
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = 1,
                            SizeProductId = 3,
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = 1,
                            SizeProductId = 4,
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = 2,
                            SizeProductId = 1,
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = 2,
                            SizeProductId = 2,
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = 2,
                            SizeProductId = 3,
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = 2,
                            SizeProductId = 4,
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = 3,
                            SizeProductId = 1,
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = 3,
                            SizeProductId = 2,
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = 3,
                            SizeProductId = 3,
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = 3,
                            SizeProductId = 4,
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = 4,
                            SizeProductId = 1,
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = 4,
                            SizeProductId = 2,
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = 4,
                            SizeProductId = 3,
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = 4,
                            SizeProductId = 4,
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = 5,
                            SizeProductId = 1,
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = 5,
                            SizeProductId = 2,
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = 5,
                            SizeProductId = 3,
                            Quantity = 10
                        },
                        new
                        {
                            ProductId = 5,
                            SizeProductId = 4,
                            Quantity = 10
                        });
                });

            modelBuilder.Entity("OfficeMenStore.Domain.Models.SizeProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SizeProducts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "M"
                        },
                        new
                        {
                            Id = 2,
                            Name = "L"
                        },
                        new
                        {
                            Id = 3,
                            Name = "XL"
                        },
                        new
                        {
                            Id = 4,
                            Name = "XXL"
                        });
                });

            modelBuilder.Entity("OfficeMenStore.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("avatar-default.png");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a820adb-93d7-4c6f-9404-bdbfc14419f4"),
                            AccessFailedCount = 0,
                            Avatar = "kha.jpg",
                            ConcurrencyStamp = "af7ae24c-656d-4c29-8545-2775c2e4d65d",
                            Email = "kha@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Lê Minh Kha",
                            NormalizedEmail = "KHA@GMAIL.COM",
                            NormalizedUserName = "KHA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHgoNmaaGajHlgDP7FONigcbQJMtvC++ZKXnLiYixBV8kSInCg2EvUerMpDKdA+hYw==",
                            PhoneNumber = "0398897634",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "kha@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("372ea575-2536-4076-9bab-3e3138de495f"),
                            AccessFailedCount = 0,
                            Avatar = "admin.jpg",
                            ConcurrencyStamp = "bfa216e8-c054-4367-b8ee-f7575f265f0f",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "John",
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOxLZkZUU2ItktIczdXNlTcw3AsC5UPvQqmXTlV6C0S5aTualt5cor3K9/OmiOIdLg==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("2a738bf3-a14b-488e-b04e-17f918e8d6a4"),
                            AccessFailedCount = 0,
                            Avatar = "nhan.jpg",
                            ConcurrencyStamp = "452af19a-0b7f-4c24-a2d7-0537cd522e30",
                            Email = "nhan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Nguyễn Trung Nhẩn",
                            NormalizedEmail = "NHAN@GMAIL.COM",
                            NormalizedUserName = "NHAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENrEVcHMdk1wFwEzBLfComhwLgyNV+EWjxJSGykUGF0QY0MG76+hlYHKQsSXUxYoiA==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "nhan@gmail.com"
                        });
                });

            modelBuilder.Entity("OfficeMenStore.Domain.Models.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e87b492-5343-4272-9a34-fa5de7cffb22"),
                            ConcurrencyStamp = "cac8da6c-85a2-4317-a48b-83dd7e2467b7",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("8f7579ee-4af9-4b71-9ada-7f792f76dc31"),
                            ConcurrencyStamp = "7c906914-9812-4a5f-be56-6698f7e5945b",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("OfficeMenStore.Domain.Models.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("OfficeMenStore.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("OfficeMenStore.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("OfficeMenStore.Domain.Models.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OfficeMenStore.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("OfficeMenStore.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OfficeMenStore.Domain.Models.Address", b =>
                {
                    b.HasOne("OfficeMenStore.Domain.Models.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OfficeMenStore.Domain.Models.Cart", b =>
                {
                    b.HasOne("OfficeMenStore.Domain.Models.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("OfficeMenStore.Domain.Models.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OfficeMenStore.Domain.Models.CartItem", b =>
                {
                    b.HasOne("OfficeMenStore.Domain.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OfficeMenStore.Domain.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OfficeMenStore.Domain.Models.SizeProduct", "SizeProduct")
                        .WithMany("CartItems")
                        .HasForeignKey("SizeProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");

                    b.Navigation("SizeProduct");
                });

            modelBuilder.Entity("OfficeMenStore.Domain.Models.FeedBack", b =>
                {
                    b.HasOne("OfficeMenStore.Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("OfficeMenStore.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OfficeMenStore.Domain.Models.Order", b =>
                {
                    b.HasOne("OfficeMenStore.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OfficeMenStore.Domain.Models.OrderDetail", b =>
                {
                    b.HasOne("OfficeMenStore.Domain.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OfficeMenStore.Domain.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OfficeMenStore.Domain.Models.SizeProduct", "SizeProduct")
                        .WithMany()
                        .HasForeignKey("SizeProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("SizeProduct");
                });

            modelBuilder.Entity("OfficeMenStore.Domain.Models.Product", b =>
                {
                    b.HasOne("OfficeMenStore.Domain.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("OfficeMenStore.Domain.Models.SizeDetail", b =>
                {
                    b.HasOne("OfficeMenStore.Domain.Models.Product", "Product")
                        .WithMany("SizeDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OfficeMenStore.Domain.Models.SizeProduct", "SizeProduct")
                        .WithMany("SizeDetails")
                        .HasForeignKey("SizeProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SizeProduct");
                });

            modelBuilder.Entity("OfficeMenStore.Domain.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("OfficeMenStore.Domain.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("OfficeMenStore.Domain.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("OfficeMenStore.Domain.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderDetails");

                    b.Navigation("SizeDetails");
                });

            modelBuilder.Entity("OfficeMenStore.Domain.Models.SizeProduct", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("SizeDetails");
                });

            modelBuilder.Entity("OfficeMenStore.Domain.Models.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Cart")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
